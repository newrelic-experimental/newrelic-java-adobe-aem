name: Combine Releases v1

on:
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: 'Trigger the Combine Releases workflow'
        required: true
        default: 'manual'

jobs:
  combine_releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Set up Git
        run: git config --global user.email "action@github.com" && git config --global user.name "GitHub Action"

      - name: Combine Releases
        id: combine_releases
        run: |
          # Define the repositories
          repos=(
            "newrelic-experimental/newrelic-java-apache-felix"
            "newrelic-experimental/newrelic-java-apache-sling"
            "newrelic-experimental/newrelic-java-apache-jackrabbit"
            "newrelic-experimental/newrelic-java-apache-jackrabbit-oak"
            "newrelic-experimental/newrelic-java-adobe-granite"
          )

          # Define the target repository
          target_repo="newrelic-experimental/newrelic-java-adobe-aem"

          # Define the GitHub token
          token=$GITHUB_TOKEN

          # Loop through each repository
          for repo in "${repos[@]}"; do
            echo "Processing repository: $repo"

            # Get the latest release tag
            response=$(curl -s -w "%{http_code}"  "https://api.github.com/repos/$repo/releases/latest" )
            status_code=$(echo "$response" | tail -n1)
            echo "Failed to fetch release tag. HTTP Status Code: $status_code"
            release_tag=$(curl -s  "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name')
            echo "Latest release tag: $release_tag"
            if [ "$release_tag" != "null" ]; then
              echo "Latest release tag: $release_tag"

              # Extract the asset name from the release tag
              repo_name=$(basename $repo | sed 's/^newrelic-java-//')
              asset_name=$(echo "$repo_name-instrumentation")
              
              download_url="https://github.com/$repo/releases/download/$release_tag/$asset_name-$release_tag.zip"

              echo "Downloading $download_url"
              curl -L -o "$asset_name-$release_tag.zip" "$download_url"

              # Unzip the downloaded file
              unzip "$asset_name-$release_tag.zip" -d "${HOME}/myrelease"

              # Clean up the ZIP file
              rm "$asset_name-$release_tag.zip"
            else
              echo "Failed to retrieve the release tag for $repo"
              echo "Latest release tag: $release_tag"
            fi
          done

      - name: Identify Release Type
        id: define_release_type
        run: |
           echo "Generating changelog to check type of release..."
           old_tag=$(git describe --abbrev=0 --tags 2>/dev/null) || true
           if [[ -n "$old_tag" ]]; then
            changelog=$(git log --pretty=format:"- %s (%h)" $old_tag..HEAD)
           fi
           if echo "$changelog" | grep -iqE '\bBREAKING CHANGE\b'; then
            echo "RELEASE_TYPE=major" >> $GITHUB_ENV
           elif echo "$changelog" | grep -iqE '\bfeat\b'; then
            echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
           else
            echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
           fi
           
      - name: Set release version
        id: set_release_version
        run: |
          major_version=1
          minor_version=0
          patch_revision=0

          # Retrieve the latest release tag
          latest_tag=$(git describe --abbrev=0 --tags 2>/dev/null) || true
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV

          if [[ -n "$latest_tag" && $latest_tag == v* ]]; then
            # Extract the major and minor versions from the latest tag
            current_major_version=$(echo $latest_tag | cut -d'.' -f1 | sed 's/v//')
            current_minor_version=$(echo $latest_tag | cut -d'.' -f2)
            current_patch_revision=$(echo $latest_tag | cut -d'.' -f3)
    
            if [ "${{ env.RELEASE_TYPE }}" = "major" ]; then
              major_version=$((current_major_version +1 ))
            elif [ "${{ env.RELEASE_TYPE }}" = "minor" ]; then
              minor_version=$((current_minor_version + 1))
              major_version=$((current_major_version))
            else
              patch_revision=$((current_patch_revision + 1))
              minor_version=$((current_minor_version))
              major_version=$((current_major_version))
            fi
         
          fi

          # Set the release version environment variable
          release_version="v${major_version}.${minor_version}.${patch_revision}"
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV

      - name: Set Tag
        id: set_tag
        run: echo "::set-output name=tag::${{ env.RELEASE_VERSION }}"

      - name: Set release name
        id: set_release_name
        run: |
          repo_name="${{ github.repository }}"
          sanitized_repo_name=$(echo "$repo_name" | awk -F 'newrelic-java-' '{print $2}')
          echo "RELEASE_NAME=${sanitized_repo_name}-instrumentation-" >> $GITHUB_ENV
          previous_tag=$(git describe --abbrev=0 --tags HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)

      - name: Create Archive
        run: |
          echo "CURRENT=${PWD}" >> $GITHUB_ENV
          cd ${HOME}/myrelease
          zip -r ${HOME}/${{ env.RELEASE_NAME}}${{ steps.set_tag.outputs.tag }}.zip *.jar
          cd ${{env.CURRENT}}

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
                var changelog = ``;
                var tag = '' + `${{ steps.set_tag.outputs.tag }}`;
                const archivePath = '${HOME}/${{ env.RELEASE_NAME}}${{ steps.set_tag.outputs.tag }}.zip';
                var response = await github.rest.repos.createRelease({
                  draft:false,
                  generate_release_notes:true,
                  name:tag,
                  owner:context.repo.owner,
                  prerelease:false,
                  repo:context.repo.repo,
                  tag_name:tag,
                  body:changelog
                });

                core.exportVariable('RELEASE_ID', response.data.id);
                core.exportVariable('RELEASE_URL', response.data.html_url);
                core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
              } catch (error) {
                core.setFailed(error.message);
              }
      - name: Upload Release Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_path: ${HOME}/${{ env.RELEASE_NAME}}${{ steps.set_tag.outputs.tag }}.zip
          asset_name: ${{ env.RELEASE_NAME}}${{ steps.set_tag.outputs.tag }}.zip
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_content_type: application/zip

name: Combine Releases v1

on:
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: 'Trigger the Combine Releases workflow'
        required: true
        default: 'manual'

jobs:
  combine_releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Set up Git
        run: git config --global user.email "action@github.com" && git config --global user.name "GitHub Action"

      - name: Combine Releases
        id: combine_releases
        run: |
          # Define the repositories
          repos=(
            "newrelic-experimental/newrelic-java-apache-felix"
            "newrelic-experimental/newrelic-java-apache-sling"
            "newrelic-experimental/newrelic-java-apache-jackrabbit"
            "newrelic-experimental/newrelic-java-apache-jackrabbit-oak"
            "newrelic-experimental/newrelic-java-adobe-granite"
          )

          # Define the target repository
          target_repo="newrelic-experimental/newrelic-java-adobe-aem"

          # Define the GitHub token
          token=$GITHUB_TOKEN

          # Loop through each repository
          for repo in "${repos[@]}"; do
            echo "Processing repository: $repo"

            # Get the latest release tag
            release_tag=$(curl -s -H "Authorization: Bearer $token" "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name')
echo "Latest release tag: $release_tag"
            if [ "$release_tag" != "null" ]; then
              echo "Latest release tag: $release_tag"

              # Extract the asset name from the release tag
              asset_name=$(echo "$release_tag" | sed 's/-instrumentation//')
              download_url="https://github.com/$repo/releases/download/$release_tag/$asset_name-$release_tag.zip"

              echo "Downloading $download_url"
              curl -L -o "$asset_name-$release_tag.zip" "$download_url"

              # Unzip the downloaded file
              unzip "$asset_name-$release_tag.zip" -d "$asset_name-$release_tag"

              # Clean up the ZIP file
              rm "$asset_name-$release_tag.zip"
            else
              echo "Failed to retrieve the release tag for $repo"
              echo "Latest release tag: $release_tag"
            fi
          done

          # Combine the extracted contents into a single release ZIP
          echo "Combining releases into a single ZIP file"
         # zip -r "combined-releases.zip" "${repos[@]/#/combined-releases/}"

          # Upload the combined release ZIP to the target repository
        # echo "Uploading combined release to $target_repo"
        #  upload_url=$(curl -s -H "Authorization: Bearer $token" "https://api.github.com/repos/$target_repo/releases/latest" | jq -r '.upload_url')
        #  upload_url="${upload_url%\{*}"  # Remove query parameters
        #  echo "Upload URL: $upload_url"

          # Upload the combined release ZIP
       #   curl -H "Authorization: Bearer $token" -H "Content-Type: application/zip" --data-binary "@combined-releases.zip" "$upload_url?name=combined-releases.zip"

          # Clean up: Remove the combined release ZIP
        #  rm "combined-releases.zip"

          # Extract semantic version from the latest release tags
         # semantic_version="v1.0.0"
          # semantic_version=$(echo "v1.0.0" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
         # echo "Semantic Version: $semantic_version"

          # Create a semantic version tag
         # echo "::set-output name=semantic_version::$semantic_version"
